# -------------------------------------------
# Titanic Survival Prediction (ML Project)
# Using: train2.csv, test1.csv
# -------------------------------------------

# 1. Import required libraries
import pandas as pd
import numpy as np
import os
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# 2. Load the datasets
base_path = r"C:\Users\shett\Downloads"

train_df = pd.read_csv(os.path.join(base_path, "train2.csv"))
test_df = pd.read_csv(os.path.join(base_path, "test1.csv"))

# Save Passenger IDs for final submission
test_passenger_ids = test_df['PassengerId']

# 3. Data Overview
print("Train Data Shape:", train_df.shape)
print("Test Data Shape:", test_df.shape)
print("\nMissing values in Train:\n", train_df.isnull().sum())

# 4. Data Cleaning

# Fill missing Age with median
train_df['Age'] = train_df['Age'].fillna(train_df['Age'].median())
test_df['Age'] = test_df['Age'].fillna(test_df['Age'].median())

# Fill missing Embarked with mode
train_df['Embarked'] = train_df['Embarked'].fillna(train_df['Embarked'].mode()[0])
test_df['Embarked'] = test_df['Embarked'].fillna(test_df['Embarked'].mode()[0])

# Fill missing Fare in test data
test_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].median())

# Drop unnecessary columns
drop_cols = ['Cabin', 'Ticket', 'Name']
train_df.drop(columns=drop_cols, inplace=True)
test_df.drop(columns=drop_cols, inplace=True)

# 5. Encode Categorical Variables
le = LabelEncoder()
for col in ['Sex', 'Embarked']:
    train_df[col] = le.fit_transform(train_df[col])
    test_df[col] = le.transform(test_df[col])

# 6. Prepare Training Data
X = train_df.drop(columns=['Survived', 'PassengerId'])
y = train_df['Survived']

# 7. Train-Test Split for validation
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# 8. Train Logistic Regression Model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# 9. Validate Model
y_pred = model.predict(X_val)
print("Validation Accuracy:", accuracy_score(y_val, y_pred))
print(classification_report(y_val, y_pred))

# 10. Prepare Test Data
X_test = test_df.drop(columns=['PassengerId'])

# 11. Predict on Test Data
test_preds = model.predict(X_test)

# 12. Create Submission File
submission = pd.DataFrame({
    'PassengerId': test_passenger_ids,
    'Survived': test_preds
})

submission_path = os.path.join(base_path, "submission.csv")
submission.to_csv(submission_path, index=False)
print("âœ… Submission file saved at:", submission_path)
